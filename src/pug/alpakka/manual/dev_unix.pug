extends _manual.pug

block append title
  | Development in Linux (and MacOS)

block content
  h2 Development in Linux (and MacOS)
  hr

  h3 Install system dependencies
  p With #[em apt], #[em pacman], #[em brew], or the equivalent package manager of your system, we have to install:
  ul
    li gcc
    li git
    li cmake
  hr

  h3 Downloading the firmware source code
  pre: code.
    git clone https://github.com/inputlabs/alpakka_firmware
  hr

  h3 Install additional libraries
  p This script will install the Pico C SDK, and the ARM architecture toolchain. It may take a while since the ARM toolchain download is big and slow.
  pre: code.
    cd alpakka_firmware
    make install  <span class='dim'># It may take several minutes.</span>
  hr

  h3 Compile and load into device
  p To setup the build environment and to compile for first time:
  pre: code.
    DEVICE=&lt;target-device&gt; make
  p Other useful commands (check the repo readme for more details).
  pre: code.
    make rebuild
    make load
    make reload
  hr

  h3 Connect via session
  p For development purposes or just to troubleshot problems, it is possible to establish a bidirectional communication with the controller via the #[em Developer Port] (the JST port above the USB) using a TTL serial cable (see #[+a('dev') Developer Kit]), so then the controller can output data into your terminal, and the controller listen to commands sent from the terminal.

  p Using #[em make session] will create a GNU Screen session, with a log similar to this:
  pre: code.
    ADAPTER=&lt;your-adapter&gt; make session

    ╔════════════════════════════╗
    ║ Input Labs Oy.             ║
    ║ Alpakka - firmware 0.82.10 ║
    ╚════════════════════════════╝
    Config NVM:
      config_version=6
      os_mode=0
      profile=1
      sensitivity=0
      deadzone=0
    Config I2C:
      I2C bus
      I2C_IO_0 ack=1
      I2C_IO_1 ack=1
    Config SPI
    Config thumbstick
    Config touch
    Config rotary
    Config profiles
    Config IMU:
      IMU_0: CTRL2_G=0x10100000
      IMU_1: CTRL2_G=0x10100000
    Profile: 1
    USB: tud_ready TRUE
  p Now in another terminal we can also use #[em make restart] or #[em make bootsel] instead of using the Developer Kit reset button (as long as the controller program did not crash). And also some other tooling will automatically use this communication channel if active.
